import{_ as a,c as s,o as i,ae as t}from"./chunks/framework.BGzr-fyY.js";const c=JSON.parse('{"title":"Type Alias: RecordType<T>","description":"","frontmatter":{},"headers":[],"relativePath":"app/type-aliases/RecordType.md","filePath":"app/type-aliases/RecordType.md","lastUpdated":null}'),p={name:"app/type-aliases/RecordType.md"};function l(h,e,n,r,d,o){return i(),s("div",null,e[0]||(e[0]=[t('<h1 id="type-alias-recordtype-t" tabindex="-1">Type Alias: RecordType&lt;T&gt; <a class="header-anchor" href="#type-alias-recordtype-t" aria-label="Permalink to &quot;Type Alias: RecordType\\&lt;T\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RecordType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Record</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre></div><p><code>RecordType</code> is a type that represents an object with string keys and values of type <code>T</code>, where <code>T</code> is a subtype of <code>ValueType</code>.</p><p>This type is used to define the structure of key-value pairs.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><h3 id="t" tabindex="-1">T <a class="header-anchor" href="#t" aria-label="Permalink to &quot;T&quot;">​</a></h3><p><code>T</code> <em>extends</em> <a href="./ValueType"><code>ValueType</code></a></p><p>The type of the values in the record.</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cache.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">resetWith</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ family: [{ name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;John&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, { name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jane&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }] });</span></span></code></pre></div>',10)]))}const y=a(p,[["render",l]]);export{c as __pageData,y as default};

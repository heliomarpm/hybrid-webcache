import{_ as t,c as a,o as r,ae as o}from"./chunks/framework.BGzr-fyY.js";const y=JSON.parse('{"title":"hybrid-webcache","description":"","frontmatter":{},"headers":[],"relativePath":"app/globals.md","filePath":"app/globals.md","lastUpdated":null}'),d={name:"app/globals.md"};function s(i,e,n,h,c,l){return r(),a("div",null,e[0]||(e[0]=[o('<h1 id="hybrid-webcache" tabindex="-1">hybrid-webcache <a class="header-anchor" href="#hybrid-webcache" aria-label="Permalink to &quot;hybrid-webcache&quot;">​</a></h1><h2 id="core" tabindex="-1">Core <a class="header-anchor" href="#core" aria-label="Permalink to &quot;Core&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Class</th><th>Description</th></tr></thead><tbody><tr><td><a href="./classes/HybridWebCache">HybridWebCache</a></td><td>Represents a hybrid web cache that supports both asynchronous and synchronous operations for storing, retrieving, and managing key-value pairs with optional time-to-live (TTL) settings.</td></tr></tbody></table><h2 id="enumarate" tabindex="-1">Enumarate <a class="header-anchor" href="#enumarate" aria-label="Permalink to &quot;Enumarate&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Enumeration</th><th>Description</th></tr></thead><tbody><tr><td><a href="./enumerations/StorageEngine">StorageEngine</a></td><td>Enum representing the different storage engines that can be used.</td></tr></tbody></table><h2 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;Model&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Interface</th><th>Description</th></tr></thead><tbody><tr><td><a href="./interfaces/DataGetModel">DataGetModel</a></td><td>Interface representing a data model retrieved from the cache.</td></tr></tbody></table><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;Types&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Alias</th><th>Description</th></tr></thead><tbody><tr><td><a href="./type-aliases/DictionaryType">DictionaryType</a></td><td><code>DictionaryType</code> is a type that represents an object with string keys and values of type <code>ValueType</code>.</td></tr><tr><td><a href="./type-aliases/KeyPath">KeyPath</a></td><td><code>KeyPath</code> is a type that represents a key path in a key-value pair.</td></tr><tr><td><a href="./type-aliases/Options">Options</a></td><td><code>Options</code> types contain all the configuration options that can be set in the constructor</td></tr><tr><td><a href="./type-aliases/RecordType">RecordType</a></td><td><code>RecordType</code> is a type that represents an object with string keys and values of type <code>T</code>, where <code>T</code> is a subtype of <code>ValueType</code>.</td></tr><tr><td><a href="./type-aliases/TTL">TTL</a></td><td>Type representing a time to live (TTL) value, which can be a number or an object with seconds, minutes, hours, or days properties.</td></tr><tr><td><a href="./type-aliases/ValueType">ValueType</a></td><td><code>ValueType</code> is a type that represents the possible values that can be stored in a key-value pair.</td></tr></tbody></table>',9)]))}const b=t(d,[["render",s]]);export{y as __pageData,b as default};
